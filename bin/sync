#!/usr/bin/env node

'use strict';

var moment = require('moment');
var _ = require('lodash');
var Promise = require('bluebird');
var request = Promise.promisifyAll(require('request'));
var log = require('../lib/helpers/logger');
var models = require('../lib/models');

var Activity = models.Activity;

var NO_OF_ACTIVITIES = 50;

function sync(accessToken) {
  var options = {
    url: 'https://www.strava.com/api/v3/athlete/activities',
    json: true,
    headers: {
      Authorization: 'Bearer ' + accessToken
    },
    qs: {
      per_page: NO_OF_ACTIVITIES
    }
  };

  Promise.all([
    request.getAsync(options),
    Activity.findAll({ order: [ [ 'startTime', 'DESC' ] ], limit: NO_OF_ACTIVITIES })
  ])
  .spread(function (strava, localActivities) {
    var res = strava[0];
    var body = strava[1];
    if (res.statusCode !== 200) {
      throw new Error('non-200 response from Strava');
    }

    var externalIds = _.map(_.pluck(body, 'id'), String);
    var localIds = _.pluck(_.pluck(localActivities, 'dataValues'), 'externalId');
    var stravaActivitiesById = _.indexBy(body, 'id');

    // Find the records that we want to create.
    var toCreate = _.difference(externalIds, localIds);
    // var toUpdate = _.difference(externalIds, toCreate);

    if (toCreate.length === 0) {
      // We're done here.
      log.info('nothing to do, exiting.');
      return;
    }

    // Creation
    var formattedStravaActivities = _.map(toCreate, function (id) {
      return formatActivity(stravaActivitiesById[id]);
    });

    log.info({ creating: toCreate }, 'adding activities');
    log.info({ activities: formattedStravaActivities });

    return Activity.bulkCreate(formattedStravaActivities);
  })
  .catch(function (err) {
    log.error({ err: err, accessToken: accessToken }, 'error hit when importing.');
  });
}

function formatActivity(activity) {
  return {
    externalId: activity.id,

    startTime: moment(activity.start_date).toDate(),
    movingTime: activity.moving_time,

    startLatitude: activity.start_latitude,
    startLongitude: activity.start_longitude,

    type: activity.type,
    title: activity.name,
    distance: activity.distance,
    elevationGain: activity.total_elevation_gain,
    averageSpeed: activity.average_speed,
    isCommute: activity.commute
  };
}

sync('f2877b070e0172315d80bdcd21f7acd028f08851');
